import abc
from typing import Generic, TypeVar

T = TypeVar("T")

class AbstractLinkedList(Generic[T], abc.ABC):
    """АТД связного списка."""

    HEAD_NIL = 0 # add_to_empty() ещё не вызывалась
    HEAD_OK = 1 # последняя head() отработала нормально
    HEAD_ERR = 2 # список пуст

    TAIL_NIL = 0 # add_to_empty() ещё не вызывалась
    TAIL_OK = 1 # последняя tail() отработала нормально
    TAIL_ERR = 2 # список пуст

    RIGHT_TAIL = 0 # курсор уже является последним узлом списка
    RIGHT_OK = 1 # последняя right() отработала нормально
    RIGHT_ERR = 2 # список пуст

    PUT_RIGHT_OK = 1 # последний вызов put_right() отработал нормально
    PUT_RIGHT_ERR = 2 # список пуст

    PUT_LEFT_OK = 1 # последний вызов put_left() отработал нормально
    PUT_LEFT_ERR = 2 # список пуст

    REMOVE_RIGHT = 0 # последний вызов remove() отработал нормально и курсор переместился на узел справа
    REMOVE_LEFT = 1 # последний вызов remove() отработал нормально и курсор переместился на узел слева
    REMOVE_ERR = 2 # список пуст

    ADD_TO_EMPTY_OK = 0 # последний вызок add_to_empty() отработал нормально
    ADD_TO_EMPTY_ERR = 0 # список не пуст
    
    # команды

    # предусловие: список не пуст
    # постусловие: курсор установлен на первый узел в списке
    @abc.abstractmethod
    def head(self):
        """Установить курсор на первый узел в списке"""

    # предусловие: список не пуст
    # постусловие: курсор установлен на последний узел в списке
    @abc.abstractmethod
    def tail(self):
        """Установить курсор на последний узел в списке"""
    
    # предусловие: список не пуст, текущий элемент не является последним узлом списка
    # постусловие: курсор сдвинут на один узел вправо, если курсор не является последним узлом списка
    @abc.abstractmethod
    def right(self):
        """Сдвинуть курсор на один узел вправо"""
    
    # предусловие: список не пуст
    # постусловие: следом за текущем узлом добавлен узел с заданным значением
    @abc.abstractmethod
    def put_right(self, value: T):
        """Вставить следом за текущим узлом новый узел с заданным значением"""

    # предусловие: список не пуст
    # постусловие: перед текущем узлом добавлен узел с заданным значением
    @abc.abstractmethod
    def put_left(self, value: T):
        """Вставить следом за текущим узлом новый узел с заданным значением"""
    
    # предусловие: список не пуст
    # постусловие: удален текущий узел, курсор сместился к существующему соседу.
    @abc.abstractmethod
    def remove(self):
        """Удалить текущий узел. Курсор смещается к правому соседу, если он есть, либо к левому, если он есть."""
    
    # постусловие: из списка удаляются все узлы
    @abc.abstractmethod
    def clear(self):
        """Отчистить список."""
    
    # предусловие: список пуст
    # постусловие: в список добавляется первый узел с заданным значением
    @abc.abstractmethod
    def add_to_empty(self, value: T):
        """Добавить новый узел с заданным значением в пустой список"""

    # запросы

    # предусловие: список не пуст
    @abc.abstractmethod
    def get(self) -> T:
        """Получить значение текущего узла"""

    @abc.abstractmethod
    def size(self) -> int:
        """Получить количество узлов в списке"""

    # дополнительные запросы
    @abc.abstractmethod
    def get_head_status() -> int:
        """Получить статус выполнения команды head. Возвращает значение HEAD_*"""

    @abc.abstractmethod
    def get_tail_status() -> int:
        """Получить статус выполнения команды tail. Возвращает значение TAIL_*"""

    @abc.abstractmethod
    def get_right_status() -> int:
        """Получить статус выполнения команды right. Возвращает значение RIGHT_*"""

    @abc.abstractmethod
    def get_get_status() -> int:
        """Получить статус выполнения запроса get. Возвращает значение GET_*"""

    @abc.abstractmethod
    def get_put_right_status() -> int:
        """Получить статус выполнения команды puh_right. Возвращает значение PUT_RIGHT_*"""

    @abc.abstractmethod
    def get_put_left_status() -> int:
        """Получить статус выполнения команды put_left. Возвращает значение PUT_LEFT*"""

    @abc.abstractmethod
    def get_remove_status() -> int:
        """Получить статус выполнения команды remove. Возвращает значение REMOVE_*"""

    @abc.abstractmethod
    def get_add_to_empty_status() -> int:
        """Получить статус выполнения команды add_to_empty. Возвращает значение ADD_TO_EMPTY_*"""
